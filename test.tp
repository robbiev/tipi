;; misc examples
(+ 1 (+ 2 (* 3 4)))
(if (> 1 2) (* 2 4) (* 2 8))
(quote (1 2 3))
(quote (1 (2 3)))
(first (quote (1 2 3)))
(rest (quote (1 2 3)))
(cons 1 (quote (2 3)))
(cons 1 (cons 2 (cons 3 (quote ()))))

;; list
(def list (func elems elems))
(apply + (list 1 2 3))
(list 2 3 4)
(list)

;; infix
(def-macro infix
  (func infixed
    (list
      (first (rest infixed))
      (first infixed)
      (first (rest (rest infixed))))))
(macro-expand (quote (infix 1 + 1)))
(infix 1 + 1)

;; defn
(def-macro defn
  (func (name args body)
    (list
      (quote def)
      name
      (list (quote func) args body))))
(macro-expand (quote (defn sum (a b) (+ a b))))

;; last
(defn last (l)
  (if (empty (rest l))
    (first l)
    (last (rest l))))

(last (list 1 2 3))

;; do
(defn do a (last a))
(do (+ 1 (+ 2 (* 3 4))) (+ 2 3))
(do (def x 2) (* x 4))
(do (def f (func (x) (* 2 x))) (f 10))
(do (def max (func (x y) (if (> x y) x y))) (max 11 21))
(quote (do (def x 2) (* x 4)))

;; concat
(defn concat (x y)
  (if (empty x)
    y
    (cons
      (first x)
      (concat (rest x) y))))

(concat (quote (1 2 3)) (quote (4 5 6)))

;; drop
(defn drop (n l)
  (if (= 0 n)
    l
    (drop (- n 1) (rest l))))
(drop 2 (list 1 2 3 4 5))

;; take-nth
(defn take-nth (n l)
  (if (empty l)
    l
    (cons
      (first l)
      (take-nth n (drop n l)))))
(take-nth 2 (quote (a 1 b 2)))
(take-nth 2 (rest (quote (a 1 b 2))))

;; let
(def-macro let (func input
  (list
    (list
      (quote func)
      (list (first (first input)))
      (if (empty (drop 2 (first input)))
        (cons (quote do) (rest input))
        (concat (list (quote let) (drop 2 (first input))) (rest input))))
     (first (rest (first input))))))
(macro-expand (quote (let (a 1) (list a))))
(macro-expand (quote (let (a 1 b 2) (+ a b))))
(macro-expand (quote (let (a 1 b 2) (+ a b) (+ a b 10))))
(macro-expand (quote
  (let (a 1
      b (+ 1 1)) (+ a b))))
(let (a 1) (+ 1 a))
(let (a 1 b 2) (+ a b) (+ a b 10))
(let (a 1 b 2) 5)
(let (a 1
      b (+ 1 1)) (+ a b))
(macro-expand (quote (let (a 1 b 2 c 3) (+ a b) (+ a b c))))
(macro-expand (quote
  (let (a 1
        b (+ 1 a)) (+ a b))))
(let (a 1
      b (+ 1 a)) (+ a b))
(let (a 1
      b (+ 1 a)
      c (+ 1 b)) (+ 1 2 3) (+ a b c))

;; or
(def-macro or
  (func exprs
    (if (empty exprs)
      false
      (list (quote if) (first exprs)
        true
        (cons (quote or) (rest exprs))))))
(macro-expand (quote (or)))
(macro-expand (quote (or true)))
(macro-expand (quote (or false)))
(macro-expand (quote (or true false)))
(macro-expand (quote (or false false true)))
(or)
(or true)
(or false)
(or true false)
(or false false true)
(macro-expand (quote
  (or
    (do (def glob 1) false)
    (do (def glob (+ 10 glob)) true)
    (do (def glob (+ 5 glob)) false))))
(or
  (do (def glob 1) false)
  (do (def glob (+ 10 glob)) true)
  (do (def glob (+ 5 glob)) false))
glob

;; and
(def-macro and
  (func exprs
    (if (empty exprs)
      true
      (list (quote if) (first exprs)
        (cons (quote and) (rest exprs))
        false))))
(macro-expand (quote (and (= 1 1) (= 1 2))))
(macro-expand (quote (and (= 1 1) (= 2 2))))
(and (= 1 1) (= 1 2))
(and (= 1 1) (= 2 2))

;; not
(defn not (a) (if a false true))
(not (and (= 1 1) (= 2 2)))

;; range
(defn range (a b)
  (if (= a b)
    (quote ())
    (cons a (range (+ a 1) b))))
(range 1 20)

;; interop
(math.Max 5.0 6.0)
(fmt.Println "Hello, tipi!")
;(import "github.com/robbiev/hello")
;(hello.Hello)
