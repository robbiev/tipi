(def concat (func (x y) (if (empty x) y (cons (first x) (concat (rest x) y)))))
(concat (quote (1 2 3)) (quote (4 5 6)))
(def list (func elems elems))
(apply + (list 1 2 3))
(def drop (func (n l) (if (= 0 n) l (drop (- n 1) (rest l)))))
(drop 2 (list 1 2 3 4 5))
(def take-nth (func (n l) (if (empty l) l (cons (first l) (take-nth n (drop n l))))))
(take-nth 2 (quote (a 1 b 2)))
(take-nth 2 (rest (quote (a 1 b 2))))
(def-macro let (func (vars body) (list (quote apply) (list (quote func) (take-nth 2 vars) body) (list (quote quote) (take-nth 2 (rest vars))))))
(macro-expand (quote (let (a 1) (list a))))
(macro-expand (quote (let (a 1 b 2) (+ a b))))
(let (a 1) (+ 1 a))
(let (a 1 b 2) (+ a b))
(let (a 1 b 2) 5)
(def-macro infix (func infixed (list (first (rest infixed)) (first infixed) (first (rest (rest infixed))))))
(macro-expand (quote (infix 1 + 1)))
(infix 1 + 1)
(def-macro or (func exprs (if (empty exprs) false (list (quote if) (first exprs) true (cons (quote or) (rest exprs))))))
(macro-expand (quote (or)))
(macro-expand (quote (or true)))
(macro-expand (quote (or false)))
(macro-expand (quote (or true false)))
(macro-expand (quote (or false false true)))
(or)
(or true)
(or false)
(or true false)
(or false false true)
(def and (func (a b) (if a (if b true false) false)))
(def not (func (a) (if a false true)))
(list 2 3 4)
(list)
(+ 1 (+ 2 (* 3 4)))
(do (+ 1 (+ 2 (* 3 4))) (+ 2 3))
(do (def x 2) (* x 4))
(if (> 1 2) (* 2 4) (* 2 8))
(do (def f (func (x) (* 2 x))) (f 10))
(do (def max (func (x y) (if (> x y) x y))) (max 11 21))
(quote (1 2 3))
(quote (1 (2 3)))
(quote (do (def x 2) (* x 4)))
(first (quote (1 2 3)))
(rest (quote (1 2 3)))
(cons 1 (quote (2 3)))
(cons 1 (cons 2 (cons 3 (quote ()))))
(def range (func (a b) (if (= a b) (quote ()) (cons a (range (+ a 1) b)))))
(range 1 20)
(and (= 1 1) (= 1 2))
(and (= 1 1) (= 2 2))
(not (and (= 1 1) (= 2 2)))
(math.Max 5.0 6.0)
(import "github.com/robbiev/hello")
(hello.Hello)
